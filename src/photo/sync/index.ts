import { MAKE_FUJIFILM } from '@/platforms/fujifilm';
import { Photo, PhotoDb } from '..';
import {
  AI_TEXT_AUTO_GENERATED_FIELDS,
  AI_TEXT_GENERATION_ENABLED,
  CHROMATIC_SORT_ENABLED,
} from '@/app/config';
import { AiAutoGeneratedField } from '../ai';
import { capitalize } from '@/utility/string';

export interface PhotoSyncStatus {
  isOutdated: boolean
  isMissingAiTextFields: AiAutoGeneratedField[]
  isMissingColorData: boolean
}

export const SYNC_QUERY_LIMIT = 1000;

export const UPDATED_BEFORE_01 = new Date('2024-06-16');
// UTC 2025-02-24 05:30:00
export const UPDATED_BEFORE_02 = new Date(Date.UTC(2025, 1, 24, 5, 30, 0));

const isPhotoOutdated = (photo: PhotoDb) =>
  photo.updatedAt < UPDATED_BEFORE_01 || (
    photo.updatedAt < UPDATED_BEFORE_02 &&
    photo.make === MAKE_FUJIFILM
  );

const getMissingAiTextFields = ({
  title,
  caption,
  tags,
  semanticDescription,
}: PhotoDb | Photo): AiAutoGeneratedField[] =>
  AI_TEXT_GENERATION_ENABLED
    ? AI_TEXT_AUTO_GENERATED_FIELDS.reduce((fields, field) => {
      switch (field) {
      case 'title':
        return !title ? [...fields, 'title'] : fields;
      case 'caption':
        return !caption ? [...fields, 'caption'] : fields;
      case 'tags':
        return (tags ?? []).length === 0 ? [...fields, 'tags'] : fields;
      case 'semantic':
        return !semanticDescription ? [...fields, 'semantic'] : fields;
      }
    }, [] as AiAutoGeneratedField[])
    : [];

export const isPhotoMissingColorData = (photo: PhotoDb) =>
  CHROMATIC_SORT_ENABLED && (
    !photo.colorData ||
    !photo.colorLightness ||
    !photo.colorChroma ||
    !photo.colorHue
  );

export const generatePhotoSyncStatus = (photo: PhotoDb): PhotoSyncStatus => ({
  isOutdated: isPhotoOutdated(photo),
  isMissingAiTextFields: getMissingAiTextFields(photo),
  isMissingColorData: isPhotoMissingColorData(photo),
});

export const photoNeedsToBeSynced = (photo: Photo) =>
  photo.syncStatus.isOutdated ||
  photo.syncStatus.isMissingAiTextFields.length > 0 ||
  photo.syncStatus.isMissingColorData;

export const getPhotoSyncStatusText = (photo: Photo) => {
  const {
    isOutdated,
    isMissingAiTextFields,
    isMissingColorData,
  } = photo.syncStatus;

  const cta = 'sync to update';
  if (isOutdated) {
    return `Outdated data—${cta}`;
  } else {
    const textParts: string[] = [];
    if (isMissingAiTextFields.length > 0) {
      const missingFields = isMissingAiTextFields
        .map(field => field.toLocaleUpperCase())
        .join(', ');
      textParts.push(`AI text (${missingFields})`);
    }
    if (isMissingColorData) {
      textParts.push('color data');
    }
    if (textParts.length > 0) {
      return `Missing ${textParts.join(', ')}—${cta}`;
    } else {
      return capitalize(cta);
    }
  }
};

export const getPhotosSyncStatusText = (photos: Photo[]) => {
  const statusText = [] as string[];

  const photosCountOutdated = photos.filter(
    photo => photo.syncStatus.isOutdated,
  ).length;
  const photosCountMissingAiText = photos.filter(
    photo => photo.syncStatus.isMissingAiTextFields.length > 0,
  ).length;
  const photosCountMissingColorData = photos.filter(
    photo => photo.syncStatus.isMissingColorData,
  ).length;
  
  if (photosCountOutdated > 0) {
    statusText.push(`${photosCountOutdated} outdated`);
  }
  if (photosCountMissingAiText > 0) {
    statusText.push(`${photosCountMissingAiText} missing AI text`);
  }
  if (photosCountMissingColorData > 0) {
    statusText.push(`${photosCountMissingColorData} missing color data`);
  }

  return statusText.join(', ');
};
