import { generateOpenAiImageQuery } from '@/platforms/openai';
import {
  AiAutoGeneratedField,
  getAiImageQuery,
  getAiTextFieldsToGenerate,
  parseTitleAndCaption,
} from '.';
import { getUniqueTags } from '@/photo/query';
import { AI_TEXT_AUTO_GENERATED_FIELDS } from '@/app/config';
import { PhotoFormData } from '../form';

export const generateAiImageQueries = async (
  imageBase64?: string,
  textFieldsToGenerate: AiAutoGeneratedField[] = [],
  existingTitle?: string,
  isBatch?: boolean,
): Promise<{
  title?: string
  caption?: string
  tags?: string
  semanticDescription?: string
  error?: string
}> => {
  let title: string | undefined;
  let caption: string | undefined;
  let tags: string | undefined;
  let semanticDescription: string | undefined;
  let error: string | undefined;

  try {
    if (imageBase64) {
      const shouldGenerateTitleAndCaption =
        textFieldsToGenerate.includes('title') &&
        textFieldsToGenerate.includes('caption');
      const shouldGenerateTitle =
        !shouldGenerateTitleAndCaption &&
        textFieldsToGenerate.includes('title');
      const shouldGenerateCaption =
        !shouldGenerateTitleAndCaption &&
        textFieldsToGenerate.includes('caption');
      const shouldGenerateTags = textFieldsToGenerate.includes('tags');
      const shouldGenerateSemantic = textFieldsToGenerate.includes('semantic');
      
      const [
        titleAndCaption,
        _title,
        _caption,
        _tags,
        _semanticDescription,
      ] = await Promise.all([
        shouldGenerateTitleAndCaption ? generateOpenAiImageQuery(
          imageBase64,
          getAiImageQuery('title-and-caption'),
          isBatch,
        ): undefined,
        shouldGenerateTitle ? generateOpenAiImageQuery(
          imageBase64,
          getAiImageQuery('title', undefined, existingTitle),
          isBatch,
        ): undefined,
        shouldGenerateCaption ? generateOpenAiImageQuery(
          imageBase64,
          getAiImageQuery('caption'),
          isBatch,
        ): undefined,
        shouldGenerateTags ? getUniqueTags()
          .then(existingTags => generateOpenAiImageQuery(
            imageBase64,
            getAiImageQuery('tags', existingTags),
            isBatch,
          )): undefined,
        shouldGenerateSemantic ? generateOpenAiImageQuery(
          imageBase64,
          getAiImageQuery('semantic'),
          isBatch,
        ): undefined,
      ]);

      if (titleAndCaption) {
        const titleAndCaptionParsed = parseTitleAndCaption(titleAndCaption);
        title = titleAndCaptionParsed.title;
        caption = titleAndCaptionParsed.caption;
      } else {
        title = _title;
        caption = _caption;
      }
      tags = _tags;
      semanticDescription = _semanticDescription;
    }
  } catch (e: any) {
    error = e.message;
    console.log('Error generating AI image text', e.message);
  }

  return {
    title,
    caption,
    tags,
    semanticDescription,
    error,
  };
};

export const addAiTextToFormData = async (
  formData: Partial<PhotoFormData> = {},
  imageBase64?: string,
  title?: string,
  tags?: string,
): Promise<Partial<PhotoFormData>> => {
  const {
    title: aiTitle,
    caption: aiCaption,
    tags: aiTags,
    semanticDescription,
  } = await generateAiImageQueries(
    imageBase64,
    getAiTextFieldsToGenerate(
      AI_TEXT_AUTO_GENERATED_FIELDS,
      Boolean(title || formData?.title),
      Boolean(formData?.caption),
      Boolean(tags || formData?.tags),
    ),
    title || formData?.title,
  );

  return {
    ...formData,
    title: formData?.title || aiTitle,
    caption: formData?.caption || aiCaption,
    tags: formData?.tags || aiTags,
    semanticDescription,
  };
};
