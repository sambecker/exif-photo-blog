import { generateAiImageQueries } from '../server';
import { parseBilingualResponse, parseTitleAndCaption, parseTags, parseAiAutoGeneratedFieldsText } from '..';

// Mock base64 image data
const mockImageBase64 = '/9j/4AAQSkZJRgABAQEASABIAAD/...'; // truncated for brevity

// Mock generateOpenAiImageQuery
jest.mock('@/services/openai', () => ({
  generateOpenAiImageQuery: jest.fn().mockImplementation((_, query) => {
    if (query === 'title-and-caption') {
      return Promise.resolve(JSON.stringify({
        title: {
          english: "Ephemeral Beauty",
          chinese: "瞬逝之美"
        },
        caption: {
          english: "Roses bask in fleeting sunlight",
          chinese: "玫瑰沐浴在转瞬即逝的阳光中"
        }
      }));
    }
    return Promise.resolve(null);
  })
}));

describe('AI Image Analysis', () => {
  describe('Field Parsing', () => {
    test('parseAiAutoGeneratedFieldsText parses field lists', () => {
      expect(parseAiAutoGeneratedFieldsText('all'))
        .toStrictEqual(['title', 'caption', 'tags', 'semantic']);
      expect(parseAiAutoGeneratedFieldsText('none'))
        .toStrictEqual([]);
      expect(parseAiAutoGeneratedFieldsText('title,caption,tags'))
        .toStrictEqual(['title', 'caption', 'tags']);
    });
  });

  describe('Response Parsing', () => {
    test('parseBilingualResponse handles valid input', () => {
      const input = JSON.stringify({
        english: 'Autumn Whispers',
        chinese: '秋语'
      });
      console.log('Testing parseBilingualResponse with input:', input);
      const result = parseBilingualResponse(input);
      expect(result).toEqual({
        english: 'Autumn Whispers',
        chinese: '秋语'
      });
    });

    test('parseBilingualResponse handles invalid input', () => {
      const input = JSON.stringify({
        english: 'No Chinese',
        chinese: 'abc' // No Chinese characters
      });
      console.log('Testing parseBilingualResponse with invalid input:', input);
      const result = parseBilingualResponse(input);
      expect(result).toEqual({
        english: input,
        chinese: ''
      });
    });

    test('parseTitleAndCaption handles valid input', () => {
      const input = JSON.stringify({
        title: {
          english: "Mountain Dawn",
          chinese: "山晓"
        },
        caption: {
          english: "First light breaks over misty peaks in silent majesty",
          chinese: "晨光静谧地洒落在云雾缭绕的山峰"
        }
      });
      console.log('Testing parseTitleAndCaption with input:', input);
      const result = parseTitleAndCaption(input);
      expect(result.title.english).toBe('Mountain Dawn');
      expect(result.title.chinese).toBe('山晓');
      expect(result.caption.english).toBe('First light breaks over misty peaks in silent majesty');
      expect(result.caption.chinese).toBe('晨光静谧地洒落在云雾缭绕的山峰');
    });

    test('parseTitleAndCaption handles invalid input', () => {
      const input = 'invalid json';
      console.log('Testing parseTitleAndCaption with invalid input:', input);
      const result = parseTitleAndCaption(input);
      expect(result).toEqual({
        title: { english: '', chinese: '' },
        caption: { english: '', chinese: '' }
      });
    });

    test('parseTags handles valid input', () => {
      const input = JSON.stringify({
        genre: 'landscape',
        english_tags: ['mountains', 'sunrise', 'mist'],
        chinese_tags: ['山脉', '日出', '云雾']
      });
      console.log('Testing parseTags with input:', input);
      const result = parseTags(input);
      expect(result).toContain('landscape');
      expect(result).toContain('mountains');
      expect(result).toContain('山脉');
    });

    test('parseTags handles invalid input', () => {
      const input = 'invalid json';
      console.log('Testing parseTags with invalid input:', input);
      const result = parseTags(input);
      expect(result).toEqual([]);
    });

    test('parseTags validates genre', () => {
      const input = JSON.stringify({
        genre: 'invalid',
        english_tags: ['mountains', 'sunrise', 'mist'],
        chinese_tags: ['山脉', '日出', '云雾']
      });
      console.log('Testing parseTags with invalid genre:', input);
      const result = parseTags(input);
      expect(result).toEqual([]);
    });
  });

  describe('AI Generation', () => {
    test('generates title and caption', async () => {
      const result = await generateAiImageQueries('mock-base64', ['title', 'caption']);
      console.log('Testing AI generation result:', result);
      expect(result.title).toBeDefined();
      if (result.title) {
        expect(result.title.english).toBe('Ephemeral Beauty');
        expect(result.title.chinese).toBe('瞬逝之美');
      }
      expect(result.caption).toBeDefined();
      if (result.caption) {
        expect(result.caption.english).toBe('Roses bask in fleeting sunlight');
        expect(result.caption.chinese).toBe('玫瑰沐浴在转瞬即逝的阳光中');
      }
      expect(result.error).toBeUndefined();
    });

    test('handles missing image data', async () => {
      const result = await generateAiImageQueries(undefined, ['title']);
      console.log('Testing AI generation with missing image:', result);
      expect(result.title).toBeUndefined();
      expect(result.error).toBeUndefined();
    });
  });
}); 